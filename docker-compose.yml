version: "3.8"

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: ks
      POSTGRES_USER: ks
      POSTGRES_DB: ks
    ports:
      - 5432:5432

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  redis:
    image: "redis:alpine"
    ports:
      - 6379:6379

  api:
    depends_on:
      - db
    build:
      context: ./api/
      dockerfile: ../Dockerfile-api
    user: "${UID}:${GID}"
    container_name: ks_api
    working_dir: /home/golang/app
    environment:
      - DATABASE_URL=postgres://ks:ks@db:5432/ks?sslmode=disable
      - STRIPE_KEY=sk_test_WHVFLdND1gwnREj3vzw6vn14
      - STRIPE_WEBHOOK_SECRET=whsec_j2BGp41RDVUzljaeqDEP8czzNRbcqyTg
      - JWT_SALT=aaP|**P1n}1tqWK
      - DB_HOST=db
      - DB_NAME=ks
      - DB_USER=ks
      - DB_PASSWORD=ks
      - REDIS_INDEX=0
    volumes:
      - ./api/:/home/golang/app:delegated
    ports:
      - "9001:9001"
      - "8000:40000"
    command: sh -c "make run"

  apidebug:
    depends_on:
      - db
    build:
      context: ./api/
      dockerfile: ../Dockerfile-api
    security_opt:
      - seccomp:unconfined
    user: "${UID}:${GID}"
    container_name: ks_api_debug
    working_dir: /home/golang/app
    environment:
      - DATABASE_URL=postgres://ks:ks@db:5432/ks?sslmode=disable
      - JWT_SALT=aaP|**P1n}1tqWK
      - DB_HOST=db
      - DB_NAME=ks
      - DB_USER=ks
      - DB_PASSWORD=ks
      - STRIPE_KEY=sk_test_WHVFLdND1gwnREj3vzw6vn14
      - STRIPE_WEBHOOK_SECRET=whsec_LM3LntrpUcx821XOLck9FvwpsUoLW0rX
    volumes:
      - ./api/:/home/golang/app:delegated
    ports:
      - "9001:9001"
      - "8000:40000"
    command: sh -c "make run-debug"

  cli:
    image: cossacklabs/ci-py-go-themis
    build:
      context: ./
      dockerfile: ./Dockerfile-cli
    user: "${UID}:${GID}"
    container_name: ks_cli
    working_dir: /home/golang/app
    environment:
      - KSAPI_URL=http://api:9001
    volumes:
      - ./:/home/golang/app:delegated
    command: sh -c "tail -f /dev/null"

volumes:
  db_data: {}
  go: {}
