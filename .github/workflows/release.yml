name: Keystone Release

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: keystone-server
  REGION: europe-west6
  GCR_IMAGE: gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE }}:${{  github.sha }}
  DATABASE_URL: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:5432/${{ secrets.DB_NAME }}?sslmode=false

on:
  push:
    tags:
      - 'v*'
    tags-ignore:
      - '*develop*'
      
jobs:
  #####################
  # Server deployment #
  #####################
  deploy_server:
    runs-on: ubuntu-latest
    outputs: 
      url: ${{ steps.deploy_production.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          region: ${{ env.REGION }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          # Set to true to authenticate the Cloud Run action
          export_default_credentials: true 

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |-
          docker build -t ${{ env.GCR_IMAGE }} ./api/
          docker push ${{ env.GCR_IMAGE }}

      - name: Run Migrations
        run: |-
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz

          ./cloud_sql_proxy -instances=${{ secrets.PROJECT_ID }}:${{ secrets.REGION }}:${{ secrets.DB_NAME }}=127.0.0.1:5432
          
          migrate -database=${{ env.DATABASE_URL }} -path api/db/migrations up
          
      - name: Deploy Production Api
        id: deploy_production
        uses: google-github-actions/deploy-cloudrun@v0.6.0
        with:
          service: ${{ secrets.SERVICE }}
          image: ${{ env.GCR_IMAGE }}
          region: ${{ env.REGION }}
          no_traffic: false
          tag: ${{ github.sha }} 
          env_vars: JWT_SALT=${{ secrets.JWT_SALT }},DB_HOST=${{ secrets.DB_HOST }},DB_NAME=${{ secrets.DB_NAME}},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},CLOUDSQL_INSTANCE=${{ secrets.CLOUDSQL_INSTANCE }},CLOUDSQL_CREDENTIALS=${{ secrets.CLOUDSQL_CREDENTIALS }}
          flags: --allow-unauthenticated --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} --service-account=${{ secrets.KS_SERVER_SERVICE_ACCOUNT }}

      - name: Show Production Deploy Output
        run: echo ${{ steps.deploy_production.outputs.url }}

  #####################
  # Cli deployment #
  #####################
  
  snapcraft:
    runs-on: ubuntu-20.04
    needs:
      - deploy_server
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Make the tag name available to later steps
      # through env.REF_NAME
      - name: Export Ref Name
        uses: FranzDiebold/github-env-vars-action@v1.2.0
        run: echo "REF_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV

      - name: Setup Working Directory
        uses: FranzDiebold/github-env-vars-action@v1.2.0
        env:
          KSAPI_URL: ${{ needs.deploy_server.outputs.url }}
          GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET }}
          GITLAB_CLIENT_ID: ${{ secrets.GL_CLIENT_ID }}
          GITLAB_CLIENT_SECRET: ${{ secrets.GL_CLIENT_SECRET }}
          BRANCH: ${{ env.REF_NAME }}
        run: |
          cd cli
          go mod edit -dropreplace github.com/wearedevx/keystone/api

          sh deploy/gen_snapcraft.sh

      - name: Install Snapcraft dependencies
        run: |
          sudo apt install libvshadow-utils

      - name: Snapcraft Build
        uses: snapcore/action-build@v1.0.8
        id: snapcraft
        with:
          path: cli/

      - name: Snapcraft Package
        run: |
          unsquashfs ${{ steps.snapcraft.outputs.snap }}
          snapcraft pack ./squashfs-root -o  ${{ steps.snapcraft.outputs.snap }}

      - name: Upload Snap Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ks-snap-${{ env.REF_NAME }}
          path: ${{ steps.snapcraft.outputs.snap }}

      - name: Snapcraft Publish Stable
        uses: snapcore/action-publish@v1
        with:
          store_login: ${{ secrets.STORE_LOGIN }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: stable

  homebrew:
    runs-on: ubuntu-latest
    needs:
      - deploy_server
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: wearedevx/homebrew-keystone
          token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      # Make the tag name available to later steps
      # through env.REF_NAME
      - name: Export Ref Name
        uses: FranzDiebold/github-env-vars-action@v1.2.0
        run: echo "REF_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV

      - name: Run Template
        env:
          KS_API_URL: ${{ secrets.KSAPI_URL_DEV }}
          GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET }}
          GITLAB_CLIENT_ID: ${{ secrets.GL_CLIENT_ID }}
          GITLAB_CLIENT_SECRET: ${{ secrets.GL_CLIENT_SECRET }}
          BRANCH: ${{ env.REF_NAME }}
        run: |-
          ./run_release.sh

      - name: Push
        uses: EndBug/add-and-commit@v7
        with:
          add: '.'
          branch: 'main'
          default_author: 'github_actions'
          message: release ${{ env.REF_NAME }}
