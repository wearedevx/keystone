name: Keystone Deployement

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: keystone-server
  REGION: europe-west6
  GCR_IMAGE: gcr.io/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE }}:${{  github.sha }}
  DATABASE_URL: postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@127.0.0.1:5432/${{ secrets.DB_NAME }}?sslmode=disable

on:
  push:
    branches:
      - develop
      - master
      
jobs:
  ####################
  # Tests and checks #
  ####################
  end-to-end-tests:
    runs-on: ubuntu-20.04

    steps:
    # Get values for cache paths to be used in later steps
      - id: go-cache-paths
        run: |-
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Checkout the head ref instead of the PR branch that github creates.
          ref: ${{ github.head_ref }}

      # Cache go build cache, used to speedup go test.
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Install themis
        run: |-
          wget -qO - https://pkgs-ce.cossacklabs.com/gpg | sudo apt-key add -
          sudo apt install apt-transport-https
          sudo sh -c 'echo "deb https://pkgs-ce.cossacklabs.com/stable/ubuntu focal main" >  /etc/apt/sources.list.d/themis.list'
          sudo apt update
          sudo apt install libthemis-dev

      - name: Run End-to-end Tests
        run: |-
          cd cli
          ./test.sh ./tests/...

      - name: Tag and Release
        uses: anothrNick/github-tag-action@1.35.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
          WITH_V: false
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          PRERELEASE_SUFFIX: develop

  #####################
  # Server deployment #
  #####################
  deploy_server:
    needs: end-to-end-tests
    runs-on: ubuntu-latest
    outputs:
      encoded_url: ${{ steps.deploy_output.outputs.encoded_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          region: ${{ env.REGION }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          # Set to true to authenticate the Cloud Run action
          export_default_credentials: true 

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |-
          docker build -t ${{ env.GCR_IMAGE }} ./api/
          docker push ${{ env.GCR_IMAGE }}

      - name: Run Migrations
        run: |-
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
          mv ./migrate.linux-amd64 ./migrate
          chmod +x ./migrate

          ./cloud_sql_proxy -instances=${{ secrets.PROJECT_ID }}:${{ env.REGION }}:keystonedb=tcp:127.0.0.1:5432 &
          sleep 5
          
          ./migrate -database=${{ env.DATABASE_URL }} -path api/db/migrations up
          
      - name: Deploy to Cloud Run as Develop
        id: deploy_develop
        uses: google-github-actions/deploy-cloudrun@v0.6.0
        with:
          service: ${{ secrets.SERVICE }}
          image: ${{ env.GCR_IMAGE }}
          region: ${{ env.REGION }}
          no_traffic: true
          tag: develop
          env_vars: JWT_SALT=${{ secrets.JWT_SALT }},DB_HOST=${{ secrets.DB_HOST }},DB_NAME=${{ secrets.DB_NAME}},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }},CLOUDSQL_INSTANCE=${{ secrets.CLOUDSQL_INSTANCE }},CLOUDSQL_CREDENTIALS=${{ secrets.CLOUDSQL_CREDENTIALS }}
          flags: --allow-unauthenticated --add-cloudsql-instances ${{ secrets.CLOUDSQL_INSTANCE }} --service-account=${{ secrets.KS_SERVER_SERVICE_ACCOUNT }}

      - name: Show Develop Deploy Output
        id: deploy_output
        run: |
          echo ${{ steps.deploy_develop.outputs.url }}
          encoded_url=$(echo "${{ steps.deploy_develop.outputs.url }}" | base64)
          echo $encoded_url
          echo "::set-output name=encoded_url::${encoded_url}"

  #####################
  # Cli deployment #
  #####################
  
  snapcraft:
    runs-on: ubuntu-20.04
    needs: deploy_server
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Working Directory (Develop)
        run: |
          cd cli
          go mod edit -dropreplace github.com/wearedevx/keystone/api
          export KSAPI_URL=`echo "${{ needs.deploy_server.outputs.encoded_url }}" | base64 --decode`
          echo "API url: $KSAPI_URL"
          echo "Needs context: ${{ toJSON(needs) }}"

          sh deploy/gen_snapcraft.sh
        env:
          KSAPI_URL: ${{ needs.deploy_server.outputs.url }}
          GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID_DEV }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET_DEV }}
          GITLAB_CLIENT_ID: ${{ secrets.GL_CLIENT_ID }}
          GITLAB_CLIENT_SECRET: ${{ secrets.GL_CLIENT_SECRET }}
          BRANCH: develop

      - name: Install Snapcraft dependencies
        run: |
          sudo apt install libvshadow-utils

      - name: Snapcraft Build
        uses: snapcore/action-build@v1.0.8
        id: snapcraft
        with:
          path: cli/

      - name: Snapcraft Package
        run: |
          unsquashfs ${{ steps.snapcraft.outputs.snap }}
          snapcraft pack ./squashfs-root -o  ${{ steps.snapcraft.outputs.snap }}

      - name: Upload Snap Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ks-snap
          path: ${{ steps.snapcraft.outputs.snap }}

      - name: Snapcraft Publish Edge
        uses: snapcore/action-publish@v1
        with:
          store_login: ${{ secrets.STORE_LOGIN }}
          snap: ${{ steps.snapcraft.outputs.snap }}
          release: edge

  homebrew:
    runs-on: ubuntu-latest
    needs:
      - deploy_server
    steps:
      - uses: actions/checkout@v2
        with:
          repository: wearedevx/homebrew-keystone
          token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Run Template
        env:
          KS_API_URL: ${{ needs.deploy_server.outputs.url }}
          GITHUB_CLIENT_ID: ${{ secrets.GH_CLIENT_ID_DEV }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GH_CLIENT_SECRET_DEV }}
          GITLAB_CLIENT_ID: ${{ secrets.GL_CLIENT_ID }}
          GITLAB_CLIENT_SECRET: ${{ secrets.GL_CLIENT_SECRET }}
          BRANCH: develop
        run: |-
          export KSAPI_URL=`echo "${{ needs.deploy_server.outputs.encoded_url }}" | base64 --decode`
          ./run_release.sh

      - name: Push
        uses: EndBug/add-and-commit@v7
        with:
          add: '.'
          branch: 'main'
          default_author: 'github_actions'
          message: 'release develop'
